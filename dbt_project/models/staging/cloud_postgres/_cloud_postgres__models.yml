version: 2

models:
  - name: stg_cloud__account_feature_flags
    columns:
      - name: account_feature_flag_id
        tests:
          - unique
          - not_null
      - name: sso_flag_type
        description: >
          This field flags if the feature flag is related to an SSO 
          integration. These type of feature flags will be activated for Enterprise
          accounts and will be directly related to the type of auth provider they 
          use like Okta, Azure AD, etc. This does not mean the account has SSO 
          setup but rather the ability to set up SSO on their cloud interface. 

  - name: stg_cloud__accounts
    columns:
      - name: account_id
        tests:
          - unique
          - not_null
      - name: plan
        description: '{{ doc("cloud_plan") }}'
        tests:
          - accepted_values:
              values: ['team', 'team_2022', 'developer', 'developer_2022', 'cancelled', 'cancelled_2022', 'trial', 'trial_2022', 'enterprise', 'free']
      - name: plan_tier
        description: '{{ doc("cloud_plan_tier") }}'
      - name: auth0_enterprise_authentication_method
        description: >
          If an enterprise client is using SSO supported by 
          our Auth0 (a third party vendor), this field will not be null. This is 
          a legacy auth method and will likely be deprecated in the future. All new
          accounts should be using our native SSO integration. 
      - name: is_reseller_acct
        description: >
          A boolean that indicates if a dbt Cloud team account is a part of a resller program.
          Reseller accounts are billed different than typical team accounts.
          There are not yet mechanisms in place to monitor billing for these accounts, as of December 2022.
          As such, these accounts should be excluded from any formal communication to team customers.

  - name: stg_cloud__audit_logs
    description: >
      This table is a record of events triggered in the Cloud UI. This includes, but is not limited to,
      user logins and changes to Cloud objects such as projects, connections, repos, etc.
      For more information on this, please view the [dbt Docs](https://docs.getdbt.com/docs/cloud/manage-access/audit-log).
    columns:
      - name: audit_log_id
        tests:
          - unique
          - not_null
      - name: actor_type
        description: >
          Indicates the object that is causing the change or being triggered.
          Should this fail, it means we're now tracking an additional object
          and should note what identifier the `actor_id` represents and what actions
          are being logged.
        tests:
          - accepted_values:
              values: ['ACTOR_USER', 'ACTOR_TOKEN_USER', 'ACTOR_TOKEN_SERVICE']
      - name: routing_key
        description: The action the actor has done in the Cloud (e.g. logged in, added/deleted environments, etc)

  - name: stg_cloud__repos
    description: >
      This table contains one row per connected Repository in dbt Cloud. Repos belong to _Projects_.
      Repository objects can be connected to Git provider backends (like GitLab, GitHub, and more). These
      repo integrations have different attributes based on 1) the selected backend and 2) the selected auth
      method for that backend.

    columns:
      - name: repository_id
        tests:
          - unique
          - not_null

      - name: account_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__accounts')
              field: account_id
              severity: warn

      - name: project_id
        tests:
          - relationships:
              to: ref('stg_cloud__projects')
              field: project_id
              severity: warn

      - name: github_installation_id
        description: >
          This field will be not-null if the Repo is imported via a GitHub Application

      - name: remote_backend
        # We cannot test NULL values here.... yet...
        # tests:
        #   - accepted_values: {values: ['github_app', 'managed', 'null']}
        description: >
          This field will be not-null if the Repo is either 1) A "managed" repo (with value "managed")
          or 2) connected via the GitHub application (with value "github_app"). If the repo is imported
          via a different means, this column will be null.

      - name: remote_url
        description: >
          The full URL of the remote repo. This URL _should_ be git-clonable but will in practice contain
          user-supplied values that are _not_ valid git clone strings.

      - name: repository_credentials_id
        tests:
          - relationships:
              to: ref('stg_cloud__repository_credentials')
              field: repository_credentials_id
              severity: warn
        description: >
          This field will be not-null if the Repo is imported via a GitLab integration. This field is _not_ used
          for any other integrations.

      - name: git_provider
        tests:
          - accepted_values:
              values: ['Other', 'GitHub', 'Bitbucket', 'GitLab', 'CodeCommit', 'Visual Studio', 'Azure']
        description: >
          This field is generated from the `remote_url` value for the repo. If detectable, it will point to
          a named git provider like GitHub, GitLab, etc.

  - name: stg_cloud__repository_credentials
    description: >
      This table stores username/password credentials for repository integrations.
      Currently, this object is only used for GitLab Enterprise connections. Note- the
      username and password values are _not_ replicated into Snowflake.

    columns:
      - name: repository_credentials_id
        tests:
          - unique
          - not_null

  - name: stg_cloud__connections
    description: >
      This table contains one record per _database connection_ present in dbt Cloud. Each connection
      belongs to a _Project_. Relevant connection details will vary based on the backing database represented
      for each row.

    columns:
      - name: connection_id
        tests:
          - unique
          - not_null

      - name: account_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__accounts')
              field: account_id
              severity: warn

      - name: type
        description: The name of the backing database (eg. redshift, snowflake, etc)
        tests:
          - accepted_values:
              # TODO: What is "adapter" here...?
              values: ['redshift', 'bigquery', 'snowflake', 'postgres', 'adapter']

  - name: stg_cloud__develop_requests
    description: >
      This table contains one row for each dbt Cloud IDE session. When users enter into the IDE,
      a new session is created, or an existing session is re-attached. This session is stocked with
      attributes of the user + project at the time of IDE startup (eg. dbt version, repo url, etc).
      IDE sessions expire after a fixed, but subject-to-change amount of time. If an IDE session expires,
      or if the IDE session is "refreshed", then a new session will be created the next time a user enters
      into the IDE.

    columns:
      - name: develop_request_id
        tests:
          - unique
          - not_null

      - name: account_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__accounts')
              field: account_id
              severity: warn

      - name: environment_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__environments')
              field: environment_id
              severity: warn

      - name: user_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__users')
              field: user_id
              severity: warn

      - name: status_name
        description: The status of this IDE session

      - name: created_at
        description: When the IDE session was first initialized (step 1)

      # TODO: Not all of these are used/valid... need to revisit this
      - name: environment_setup_started_at
        description: When the IDE began initializing the environment (step 2)

      - name: profile_setup_started_at
        description: When the user's profiles.yml file is written out to disk (step 3)

      - name: deps_setup_started_at
        description: When the `dbt deps` command is run in the IDE startup process (step 4)

      - name: running_at
        description: When the IDE is ready to use (step 5)

      - name: ready_at
        description: When the IDE is ready to use (step 6)

  - name: stg_cloud__environments
    columns:
      - name: environment_id
        tests:
          - unique
          - not_null
      - name: environment_type
        tests:
          - accepted_values:
              values: ['development','deployment']

      - name: account_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__accounts')
              field: account_id
              severity: warn

      - name: project_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__projects')
              field: project_id
              severity: warn

      # TODO : You stopped _here_

  - name: stg_cloud__job_definitions
    description: >
      This table contains one record per Job Definition in dbt Cloud. Job definitions belong
      to environments and are comprised of a series of run steps plus an optional schedule-based
      trigger. When a job definition is triggered (either via the scheduler, an API request, or a webhook),
      dbt Cloud will create a new _run_.

    columns:
      - name: job_definition_id
        tests:
          - unique
          - not_null

      - name: environment_id
        tests:
          - relationships:
              to: ref('stg_cloud__environments')
              field: environment_id
              severity: warn

      - name: account_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__accounts')
              field: account_id
              severity: warn

      - name: execute_steps
        description: A list of dbt commands that should be invoked, in order, when this job is triggered

      - name: dbt_version
        description: >
          A specific dbt version to run this job with, or NULL if the dbt version should be inherited from
          the Job Definition's parent Environment.

      - name: generate_docs
        description: True if this jobs is configured to generate documentation for the dbt project, otherwise False

      - name: cron
        description: A cron-style schedule on which jobs should be run. This schedule takes effect if `triggers_schedule` is True.

      - name: triggers_github_webhook
        description: If True, then webhooks emitted for the backing Repository will trigger a new run from this job

      - name: triggers_schedule
        description: If True, then new runs will be enqueued periodically based on the `cron` definition for this job

      - name: settings_target_name
        description: A user-supplied override for the run's `target_name`. This will contain the value `default` by default

      - name: settings_thread
        description: The number of threads that dbt Core should use when running this job. The default value is `1`

  - name: stg_cloud__runs
    description: "A log of all the runs that have executed in dbt Cloud. Each run is comprised of one or more run steps"
    columns:
      - name: run_id
        tests:
          - unique
          - not_null

      - name: account_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__accounts')
              field: account_id
              severity: warn

      - name: environment_id
        tests:
          - relationships:
              to: ref('stg_cloud__environments')
              field: environment_id
              severity: warn

      - name: job_definition_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__job_definitions')
              field: job_definition_id
              severity: warn

      - name: trigger_id
        tests:
          - relationships:
              to: ref('stg_cloud__run_triggers')
              field: trigger_id
              severity: warn


  - name: stg_cloud__run_triggers
    description: "The trigger source for a given dbt run. This can be a PR build, an API request, a manual kickoff, or a schedule-based trigger"
    columns:
      - name: trigger_id
        tests:
          - unique
          - not_null

      - name: trigger_type
        description: "The type of trigger that kicked off this run"
        tests:
          - accepted_values:
              values: ['pull request', 'scheduled', 'api', 'manual']

      - name: cause
        description: "The system- or user-supplied reason for triggering the run"

      - name: pull_request_number
        description: "If this is a PR build, then the PR number from the git provider"

      - name: pull_request_source
        description: "If this is a PR build, then name of the originating git provider"

      - name: git_branch
        description: >
          A custom git branch, if specified. This value will be `<default>` if a custom
          branch is not configured for the environment, or it will be a different value
          if 1) a custom branch is configured for the environment or 2) if a custom branch
          was provided via an API trigger or webhook.

  - name: stg_cloud__projects
    description: >
      This table contains one record per dbt Cloud Project. A Project is a wrapper
      around a database Connection and a Repository. Projects contain multiple environments.
      A project is the top-level construct that exists in the Development and Deployment
      capabilities of dbt Cloud.

    columns:
      - name: project_id
        tests:
          - unique
          - not_null

      - name: account_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__accounts')
              field: account_id
              severity: warn

      - name: connection_id
        tests:
          - relationships:
              to: ref('stg_cloud__connections')
              field: connection_id
              severity: warn

      - name: repository_id
        tests:
          - relationships:
              to: ref('stg_cloud__repos')
              field: repository_id
              severity: warn

      - name: dbt_project_subdirectory
        description: The subdirectory inside of the linked repository that contains a dbt project

  - name: stg_cloud__user_licenses
    description: >
      This table contains one record per use license. Each user license assigns a user to an account
      with a specified _type_ of license. This license can be one of "developer" or "read_only".
      Users with developer licenses may use the IDE, view run details & logs, and more. Users with
      read_only licenses are restricted to seeing a simplified dashboard of job status, project documentation,
      and source freshness.

    columns:
      - name: user_license_id
        tests:
          - unique
          - not_null

      - name: user_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__users')
              field: user_id
              severity: warn

      - name: account_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__accounts')
              field: account_id
              severity: warn

      - name: license_type
        description: The license type assigned to the user in the account
        tests:
          - not_null
          - accepted_values:
              values: ['developer', 'read_only']

  - name: stg_cloud__users
    description: >
      This table contains one row per dbt Cloud User. Each user may assigned to zero or
      more accounts via user licenses.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - database_source
            - tenant_user_id
    columns:
      - name: user_id
        description: >
          Unique identifier of a dbt Cloud user. Corresponds either to:
          - the id of the user in the North America multi-tenant dbt Cloud instance
          - the hash of the concatenation of `database_source` and id of the user in 
            single-tenant or other multi-tenant dbt Cloud instances
        tests:
          - unique
          - not_null
      - name: tenant_user_id
        description: Identifier of a dbt Cloud user in the given dbt Cloud instance
        tests:
          - not_null
      - name: database_schema
        description: Name of the Snowflake schema regrouping the raw extracted dbt Cloud instance data
        tests:
          - not_null
      - name: database_type
        description: Type of deployment used for the dbt Cloud instance (multi tenant or single tenant)
        tests:
          - not_null
      - name: database_source
        description: '{{ doc("database_source") }}'
        tests:
          - not_null

      - name: email
        description: The user's email address.

      - name: first_name
        description: The user's first name.

      - name: last_name
        description: The user's last name.

      - name: name
        description: The user's full name.

      - name: email_top_level_domain
        description: >
          The final part of the user's email address.
          For example, `test.user@dbtlabs.com`` would produce `com`

      - name: is_active
        description: A boolean that determines if a user is still existing in dbt Cloud

      - name: is_staff
        description: >
          A boolean that indicates if a user is dbt Labs staff.
          This is determined on the backend of dbt Cloud.

      - name: is_superuser
        description: >
          A boolean that indicates if a user has superuser privileges in dbt Cloud.
          This is determined on the backend of dbt Cloud.

      - name: is_fishtown_user
        description: >
          A boolean that indicates if a user has an @dbtlabs.com or @fishtownanalytics.com email.

      - name: date_joined__og
        description: The timestamp in which the user was created in dbt Cloud, in their local timezone.

      - name: date_joined__ntz
        description: The timestamp in which the user was created in dbt Cloud, in UTC.

      - name: last_login
        description: A timestamp indicating when the user last logged into dbt Cloud.

  - name: stg_cloud__user_invites
    description: >
      This table contains one record for each invitation extended to a user in dbt Cloud.
    columns:
      - name: invite_id
        tests:
          - unique
          - not_null

      - name: account_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__accounts')
              field: account_id
              severity: warn

      - name: group_ids
        description: A list of groups that the newly-invited user should be assigned to

      - name: license_type
        description: The type of license that should be assigned to the user when the invite is redeemed

  - name: stg_cloud__user_groups
    description: >
      A mapping table that assigns Users to Groups in a given Account.

    columns:
      - name: group_membership_id
        tests:
          - unique
          - not_null

      - name: account_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__accounts')
              field: account_id
              severity: warn

      - name: group_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__groups')
              field: group_id
              severity: warn

      - name: user_license_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_cloud__user_licenses')
              field: user_license_id
              severity: warn

  - name: stg_cloud__accounts_snapshot_daily
    description: >
      Record of the state of an account on each day since the account
      was created
    columns:
      - name: id
        tests:
          - unique
          - not_null
      - name: plan
        description: '{{ doc("cloud_plan") }}'
      - name: plan_tier
        description: '{{ doc("cloud_plan_tier") }}'

  - name: stg_cloud__user_licenses_snapshot_daily
    description: >
      Record of the state of each user license on each day since the license
      was created. User liceneses associate a user with an account. This table
      contains one row per user/account/day.
    columns:
      - name: id
        tests:
          - unique
          - not_null

  - name: stg_cloud__dbt_adapters
    description: >
      Provides a record of each non-BQ/Redshift/Snowflake/Postgres adapter that
      an account utilizes.
    columns:
      - name: account_adapter_id
        description: >
          This is an adapter per dbt cloud account. So one dbt account can have
          multiple account_adapter_ids
        tests:
          - unique
          - not_null
      - name: adapter_version
        description: >
          This provides the adapter version that the adapter is on, including the
          data warehouse. It is possible to use the Spark connector to connect
          to Databricks. This does not include adapters built for BigQuery/Redshift/
          Snowflake.
        tests:
          - not_null

  - name: stg_cloud__dbt_adapters_connection_info
    description: >
      Provides a record of each non-BQ/Redshift/Snowflake/Postgres adapter and the connection details associated with it
    columns:
      - name: connection_adapter_id
        description: >
          This is an adapter per dbt cloud connection. So one dbt account and/or project can have
          multiple connection_adapter_ids
        tests:
          - unique
          - not_null
      - name: connection_details
        description: >
          A JSON field that holds the different fields & values for the associated connection.
          This includes information like type, method, host, port, organization, cluster, connect_timeout, connect_retries.

  - name: stg_cloud__user_feature_flags
    description: >
      Record of user-level feature flags that are enabled for a given user. Each record
      represents a single feature flag.

    columns:
      - name: user_id
        description: >
          The user for which the feature flag is enabled.
        tests:
          - not_null

      - name: feature_name
        description: >
          The name of the feature that is enabled for the user
        tests:
          - not_null

  - name: stg_cloud__service_token
    description: >
      This table contains one row per dbt Cloud service token. One cloud account may have 
      several service tokens.

    columns:
      - name: service_token_id
        tests:
          - unique
          - not_null

  - name: stg_cloud__environment_variables
    description: >
        This table has the list of environment variables set at any precedence
        level (project, environment, job, user). Each environment variable has
        a project_id and account_id. The environment_id, job_id, and user_id are
        all supplied depending on what precedence_level is specified. All jobs
        inherit environment variables set at either the project or enviroment
        level and can be overridden at either the job or user level.
    columns:
      - name: environment_variable_id
        tests:
          - unique
          - not_null
      - name: precedence_rank
        description: >
          This field is used to be able to rank the environment variables. This
          is essential in order to apply overrides in the correct manner. We use
          this field in `dim_cloud_environments` where we need to apply both
          project and environment level env vars to each environment. This field
          is used to make it easy to override project level variables by their
          environment counterparts.
  - name: stg_cloud__auth_provider
    description: This table holds the auth provider data about the configured IdPs in dbt Cloud
    columns:
      - name: auth_provider_id
        description: The hashed ID of the authentication provider.
        tests:
          - not_null
          - unique
      - name: slug
        description: Enterprise SSO slug for the auth provider. This value is not globally unique but it is unique per region
        tests:
          - not_null
      - name: account_id
        description: The hashed ID of the account.
        tests:
          - not_null
      - name: auth0_migration_status
        description: A flag indicating if Auth0 migration has been performed (true/false).
        tests:
          - accepted_values:
              values: ['true', 'false']
      - name: identity_provider
        description: The type of identity provider (e.g., saml, okta, gsuite, azure_single_tenant, azure_multi_tenant).
        tests:
          - accepted_values:
              values: ['saml', 'okta', 'gsuite', 'azure_single_tenant', 'azure_multi_tenant']
      - name: is_identity_provider_deleted
        description: A flag indicating if the identity provider has been deleted (0 = not deleted, 1 = deleted).
        tests:
          - accepted_values:
              values: ['0', '1']
      - name: created_at
        description: The timestamp when the record was created.
        tests:
          - not_null
      - name: updated_at
        description: The timestamp when the record was last updated.
        tests:
          - not_null