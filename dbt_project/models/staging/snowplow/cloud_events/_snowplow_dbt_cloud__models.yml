
version: 2

models:
  - name: stg_dbt_cloud__api_requests
    description: >
      This table has a record for each API request that uses the dbt Cloud API.

    columns:
      - name: event_id
        tests:
          - unique
          - not_null

      - name: method
        tests:
          - accepted_values:
              values: ['UNSPECIFIED', 'GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'TRACE', 'PATCH']
      
      - name: auth_type
        tests:
          - accepted_values:
              values: ['UNKNOWN', 'SESSION', 'TOKEN']

      - name: _loaded_at
        description: >
          {{ doc("_loaded_at") }}

  - name: stg_dbt_cloud_ide_events
    description: >
      This table represents a list of Snowplow events particular to the dbt Cloud
      IDE. Each event contains a `develop_request_id` which can be used to join
      to a particular IDE session.

      Models which parse the `unstruct_event` field are built on top of this model

    columns:
      - name: event_id
        tests:
          - unique
          - not_null

      - name: page_view_id
        description: The unique id for the pageview. Joins to the pageviews table.

      - name: event_at
        description: The timestamp when the event was received

      - name: develop_request_id
        description: The unique ID for the IDE session in which this event was fired

      - name: _loaded_at
        description: >
          {{ doc("_loaded_at") }}

  - name: stg_dbt_cloud_ide_invocation
    description: >
      This table represents all of the _dbt invocations_ that happen inside of the IDE.
      An _invocation_ is the execution of a dbt command, eg. `dbt run` or `dbt test -m my_model`.

    columns:
      - name: event_id
        tests:
          - unique
          - not_null

      - name: invocation_source
        description: The action that triggered the invocation (eg. `command_bar`)

      - name: invocation_command
        description: The dbt command which was invoked (eg. `dbt run -m my_model`)

      - name: invocation_command_type
        description: The type of command which was invoked (eg. `run`, `test`, `seed`)

      - name: invocation_status
        description: >
          The end result of the invocation. May be one of `success`, `cancel`, 
          `error`, or 'incomplete'. Incomplete here means that a user tried to
          trigger an invocation but the invocation did not successfully run. The
          possible reasons are either (a) that the user attempted to run an 
          invalid invocation or (b) something happened in cloud that prevented
          an invocation from running. Today we currently can't isolate what the
          cause for incompete invocations are because we don't actively track
          these errors.

      - name: invocation_runtime_in_seconds
        description: The amount of time that the invocation ran for in seconds

  - name: stg_dbt_cloud_ide_sql_operation
    description: >
      This table represents all of the _sql operations_ that happen inside of the IDE.
      Here, a _SQL operation_ is one of `compile_sql` or `run_sql`. This event _does not_
      represent the invocation of a dbt build.

    columns:
      - name: event_id
        tests:
          - unique
          - not_null

      - name: tab_name
        description: The name of the tab which was compiled or run

      - name: operation_source
        description: How the operation was invoked, eg. from a keyboard shortcut or from a button
        tests:
          - accepted_values:
              values: [file, statement, scratchpad]

      - name: operation_type
        description: The type of operation that was executed
        tests:
          - accepted_values:
              values: [compile, show]

      - name: operation_status
        description: The end result of the operation. May be one of `success`, `cancel`, or `error`.

      - name: operation_runtime_in_seconds
        description: The amount of time that the operation ran for in seconds

  - name: stg_dbt_cloud_ide_tab_view
    description: >
      This table represents all of the tabs that were _opened_ inside of the IDE. If a new tab
      (either a Statement or a File tab) is opened, this event will fire.

    columns:
      - name: event_id
        tests:
          - unique
          - not_null

      - name: tab_name
        description: The name of the tab which was viewed

      - name: tab_source
        description: How the tab was opened, eg. from the filetree
        tests:
          - accepted_values:
              values: [filetree]

      - name: tab_type
        description: Indicates if the tab is a Statement or a File
        tests:
          - accepted_values:
              values: [file, statement, scratchpad]

      - name: tab_linecount
        description: The number of lines in the tab when the tab was opened

      - name: tab_filesize
        description: The size of the tab in bytes when the tab was opened

  - name: stg_dbt_cloud__ide_dag_renders
    description: >
      This table represents events fired when a DAG is actually rendered in the IDE.

    columns:
      - name: ide_dag_render_id
        tests:
          - unique
          - not_null
      - name: was_manually_requested
        description: >
          This field informs us if a user manually requested a DAG render even if we
          had flagged that this render might take long or hurt the web experience.
          This field was added June 30, 2022. It was fully shipped for multi-tenant
          on July 4, 2022.

  - name: stg_dbt_cloud__ide_node_interactions
    description: >
      This table represents events fired when a user double-clicks (or 
      right-clicks) on a node to refocus on the underlying model.
    columns:
      - name: ide_dag_node_interaction_id
        tests:
          - unique
          - not_null

  - name: stg_dbt_cloud__knowledge_layer_requests
    description: >
      This table represents events fired when a query to the knowledge layer is 
      returned with information about a specified subdag.
    columns:
      - name: dag_knowledge_layer_request_id
        tests:
          - unique
          - not_null

  - name: stg_dbt_cloud__ide_dag_view_starts
    description: >
      This table represents events fired when a DAG viz is initiated. This 
      precedes the request to the “knowledge layer” that actually returns DAG 
      information.
    columns:
      - name: ide_dag_view_start_id
        tests:
          - unique
          - not_null

  - name: stg_dbt_cloud__ide_restore_work
    description: >
      This table represents events fired when the IDE restores work from your 
      previous session. This is also a good indicatior of the IDE being fully
      started because this event won't fire until the IDE is fully set up and
      work can be successfully restored in your browser.
    columns:
      - name: ide_restore_work_id
        tests:
          - unique
          - not_null

  - name: stg_dbt_cloud__ide_lifecycle_complete
    description: >
      This table represents events fired when the IDE reports that the lifecycle
      (aka startup) setup is completed. It's important to note that this event
      is specifically for IDE 1.0. We also noticed buggy behavior with this event
      so it inconsistently fires and it's unclear why this is the case. No further
      investigation was done here because we're moving off of 1.0 soon.
    columns:
      - name: ide_lifecycle_complete_id
        tests:
          - unique
          - not_null

  - name: stg_dbt_cloud__ide_lifecycle
    description: >
      This table represents events fired when the IDE reports that the lifecycle
      (aka startup) setup is kicked off. It's important to note that this event
      is specifically for IDE 1.0. This could either be triggered by some start
      or manual restart event.
    columns:
      - name: ide_lifecycle_id
        tests:
          - unique
          - not_null
      - name: lifecycle_type
        tests:
          - accepted_values:
              values: [start, restart]

  - name: stg_dbt_cloud__ide_git_operation
    description: >
      This table represents events fired when git actions are executed in
      the IDE. 
    columns:
      - name: ide_git_operation_id
        description: "An assigned ID for the git action done in the IDE."
        tests:
          - unique
          - not_null

  - name: stg_dbt_cloud__ide_git_operation_complete
    description: >
      This table represents events fired when git actions are completed in
      the IDE. The `ide_git_operation_id` matches that of the other model
      `stg_dbt_cloud__ide_git_operation`.
    columns:
      - name: ide_git_operation_id
        description: "An assigned ID for the git action done in the IDE."
        tests:
          - unique
          - not_null

  - name: stg_dbt_cloud__ide_filesystem
    description: >
      This table represents events fired when the filesystem is interacted with
      in the IDE. This includes reads, saves, and renames. This currently is for
      IDE 1.0. This table also includes timing information for those filesystem
      operations.
    columns:
      - name: ide_filesystem_id
        tests:
          - unique
          - not_null

  - name: stg_dbt_cloud__ide_refresh_lifecycle
    description: >
      This table represents the new lifecycle (aka startup) events for the IDE 1.1
      and onwards. Here you will find all the relevant fields to understand the startup
      timing and status for each IDE start type.
    columns:
      - name: ide_lifecycle_id
        description: "This ID is the unique identifier for any single startup step event."
        tests:
          - unique
          - not_null
      - name: startup_id
        description: >
          This ID represents a unique startup. A unique startup is either triggered by an IDE
          page being opened, refreshed, or the IDE instance itself being refreshed (pressing
          the IDE refresh button). This ID work as a grouping key to combine a series of lifecycle
          events so that you could easily string together a combination of events to help you evaluate
          the timing and status of a particular startup.
      - name: develop_request_id
        description: >
          The develop_request_id is populated the soonest we have information of this.
          It usually appears a couple stages in so not all the events have this value.
          This value represents a representative develop request ID of the entire startup 
          session but we only get information when the stage has information available. 
          This is why we have a backfilled version of this field in this table that is 
          more reliable for our analytics use cases.
      - name: backfilled_develop_request_id
        description: >
          The most reliable develop_request_id for this specific event which we get by
          backfilling at the startup_id level.
      - name: is_cold_start
        description: >
          A cold start is when an IDE session does not have a currently running backend server
          to power the IDE. This value is only true if your startup triggers the startup of all
          the backend components, otherwise it will appear as false. This value represents behavior
          of the entire startup session but we only get information when the stage has information
          available. This is why we have a backfilled version of this field in this table that is 
          more reliable for our analytics use cases.
      - name: backfilled_is_cold_start
        description: >
          The most reliable is_cold_start for this specific event which we get by
          backfilling at the startup_id level.
