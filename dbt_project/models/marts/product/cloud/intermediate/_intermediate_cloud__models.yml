version: 2

models:

  - name: int_ide_dag_sessions
    description: >
      Each DAG in IDE session starts with a start event. This table contains a row
      for every DAG view start and all other relevant events are rolled up to this
      session level. Other events rolled up here are DAG renders, knowledge layer
      requests, and node interactions. This can be joined to `fct_cloud_ide_sessions`
      to link this with a cloud session.
    columns:
    - name: ide_dag_view_start_id
      tests:
      - unique
      - not_null    

  - name: int_cloud__account_plan_history
    description: > 
      Simplified view of stg_cloud__accounts_snapshot_daily for easier joining. 
      Note that the end_date will match the next status' start_date. It's 
      important to get your filter correct to make sure you don't create 
      duplicates on the join.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: start_date
          upper_bound_column: end_date
          partition_by: account_id
          gaps: not_allowed
    columns:
      - name: plan
        description: '{{ doc("cloud_plan") }}'

      - name: plan_tier
        description: '{{ doc("cloud_plan_tier") }}'

      - name: previous_plan
        description: See plan.

      - name: previous_plan_tier
        description: See plan tier.

  - name: int_cloud__partner_connect_signups_unioned
    description: >
      This model unions Snowflake & Databricks partner connect signups with BigQuery partner connect signups.
      This is required since BigQuery partner connect signups are done via a landing page, instead of through the dbt Cloud API.
      Specifically, when a user creates a BigQuery partner connect account, the information lives on the Hubspot Contact for that individual.
      Note: a user will not be allowed to create an account if there is already an existing dbt Cloud user with the same email.
      As a result, the first account created by that individual is the BigQuery partner connect account.
    columns:
      - name: dbt_cloud_account_id
        description: The dbt Cloud Account ID associated with the Partner Connect signups.
        tests:
          - unique
          - not_null
        
      - name: partner_connect_signup_id
        description: >
          The ID of the partner connect signup for Snowflake & Databricks signups.
          This can be used to join to the `stg_cloud__partner_connect_signups` model.

      - name: sign_up_source
        description: >
          The source of the Partner Connect signup. 
          Current values include: Snowflake, Databricks, and BigQuery.
        tests:
          - not_null

  - name: int_cloud__users_joined
    description: >
      This model is used to enriched the information in `stg_cloud__users`.
      Currently, this is joing in user email verification information.
      In the future, it can be used to join data from anywhere else in our project where `fct_cloud_users` is too deep in the DAG.
    columns:
      - name: user_id
        description: >
          Unique identifier of a dbt Cloud user.
          Corresponds either to: - the id of the user in the North America multi-tenant
          dbt Cloud instance - the hash of the concatenation of `database_source` and id of the user in 
          single-tenant or other multi-tenant dbt Cloud instances
        tests:
          - unique
          - not_null

      - name: database_schema
        description: Name of the Snowflake schema regrouping the raw extracted dbt Cloud instance data

      - name: database_source
        description: '{{ doc("database_source") }}'

      - name: database_type
        description: Type of deployment used for the dbt Cloud instance (multi tenant or single tenant)

      - name: tenant_user_id
        description: Identifier of a dbt Cloud user in the given dbt Cloud instance

      - name: email
        description: The user's email address.

      - name: first_name
        description: The user's first name.

      - name: last_name
        description: The user's last name.

      - name: name
        description: The user's full name.

      - name: email_top_level_domain
        description: The final part of the user's email address. For example, `test.user@dbtlabs.com`` would produce `com`

      - name: is_active
        description: A boolean that determines if a user is still existing in dbt Cloud

      - name: is_staff
        description: A boolean that indicates if a user is dbt Labs staff. This is determined on the backend of dbt Cloud.

      - name: is_superuser
        description: A boolean that indicates if a user has superuser privileges in dbt Cloud. This is determined on the backend of dbt Cloud.

      - name: is_fishtown_user
        description: A boolean that indicates if a user has an @dbtlabs.com or @fishtownanalytics.com email.

      - name: date_joined__og
        description: The timestamp in which the user was created in dbt Cloud, in their local timezone.

      - name: date_joined__ntz
        description: The timestamp in which the user was created in dbt Cloud, in UTC.

      - name: last_login
        description: A timestamp indicating when the user last logged into dbt Cloud.

      - name: is_verified
        description: >
          A boolean value that indicates if a user has verified their email address.
          Note: all single tenant users are considered verified.

      - name: first_email_verification_sent_at
        description: >
          A timestamp of when the users first email verification was sent.
          Note: this does not ensure a user is verified - only that they received communication.

      - name: first_verified_at
        description: A timestamp indicating when a user first verified their email.

      - name: last_verified_at
        description: A timestamp indicating when a user last verified their email.

  - name: int__cloud_ide_active_session_events
    description: >
      This table represents the union of relevant events that complete the story
      of an IDE session's startup. There is logic here to backfill values that
      originally didn't exist and that we had to impute. This also includes trying
      to determine the type of startup because that will impact which events are
      relevant with respect to the timing information of a particular startup
      session. The grain of this table is also hard to perfectly capture, but this
      is fine becuase we will calculate values on top of this model and uniqueness
      is not a requirement to get the right answer here. The logic of this model
      is in line with the IDE 1.1 Metrics planning doc 
      [Metrics: Startup, Interaction, Reliability](https://www.notion.so/dbtlabs/Metrics-Startup-Interaction-Reliability-150aa4d9c209460897de60c4559b4e33)
    columns:
      - name: active_session_id
        tests:
        - not_null
      - name: event_at
        tests:
        - not_null

  - name: int_cloud_job_dbt_versions_cleaned
    description: >
      This model takes atypical or mis-entered values of the semantic dbt version
      (e.g. 18.0) and uses REGEX to cast them into a standardized format (e.g. 0.18.0)
    columns:
      - name: dbt_version
        description: >
          The original dbt_version, which could be missing components or mis-entered
      - name: dbt_version_tuple
        description: >
          The tuple of major, minor, patch parsed out using REGEX. 
      - name: major
        description: The major release version, parsed from the tuple
      - name: minor
        description: The minor release version, parsed from the tuple    
      - name: patch
        description: The patch release version, parsed from the tuple
      - name: dbt_version_cleaned
        description: The cleaned version string concatenated by the parsed major/minor/patch.

  - name: int_cloud_job_version_enriched
    description: >
      This model incorporates elements of a cloud job's given environment, which allows
      the job to inherit properties from the environment when not populated straight
      from the job-level data. See dim_cloud_jobs docs for column descriptions. 

  - name: int_cloud__develop_requests
    description: >
      This model takes the staging model, and adds some enrichment logic to it.  In particular, it uses 
      case-when statements to analyze and categorize the status_message colum results into categorical buckets, 
      to help analyze the outcomes of develop sessions.
    columns:
      - name: computed_status_exit_category
        description: >
          This is a category that is calculated from the session exit status_message.  This dimension attempts to bucket the most common failure types together.